Problem: A file has rows of characters and blank lines. 
  For each group of rows between blanks lines, cacatenate them and print on one line.
  Discare the blank lines.

Input is this:
abc

a
b
c

ab
ac

a
a
a
a

b


Expect output some variation of this:
abc
abc
abac
aaaa
b
Variations:
  * space or comma between membors of a group
  * keep blank lines between groups
  

Setup:
create table foldlines (a number, b varchar2(10));
-- order of input is important, the sequence allows us to reference the original input order.
create sequence foldseq;
-- rerunable, if you ignore the error...
truncate table foldlines;
insert into foldlines values (foldseq.nextval,'abc');
insert into foldlines values (foldseq.nextval,'');
insert into foldlines values (foldseq.nextval,'a');
insert into foldlines values (foldseq.nextval,'b');
insert into foldlines values (foldseq.nextval,'c');
insert into foldlines values (foldseq.nextval,'');
insert into foldlines values (foldseq.nextval,'ab');
insert into foldlines values (foldseq.nextval,'ac');
insert into foldlines values (foldseq.nextval,'');
insert into foldlines values (foldseq.nextval,'a');
insert into foldlines values (foldseq.nextval,'a');
insert into foldlines values (foldseq.nextval,'a');
insert into foldlines values (foldseq.nextval,'a');
insert into foldlines values (foldseq.nextval,'');
insert into foldlines values (foldseq.nextval,'b');
commit;
select * from foldlines;

with g as (
  select a,b
    , sum(nvl2(b,0,1)) over (order by a) grouping
  from foldlines
)
select min(a), max(a)
  ,listagg(b,' ') within group (order by a) 
from g
where b is not null 
group by grouping;

-- but why?
-- using an analytical function to get a running total of null lines, which is used to identify consecutive groups
sum(nvl2(b,0,1)) over (order by a)
  sum(expression) --> gives a running total of (expression)
      expression  --> what are we adding? sum(1) is 1+1+1...
      nvl2(b,0,1) --> this expression is little cryptic
                  --> if b is not null then return 0, if it is null return 1
                  --> this lets us count the number of null lines
  over (order by a) --> running total means summing up values in an order
                    --> order by a gives that ordr
       ... -> over() has other optional parameters too, not used in this case
         --> not explaining here but don't want to con
-- analytical functions are one of the last operations performed on a result set
-- use the where clause to analyze the results
-- use the results as an inline view to modified the output
  -- for example, here I need the blank lines to count correct
  -- i will use a where clause in the new view to remove the blank lines

asdf
