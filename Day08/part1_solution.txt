-- assume input is in table day08_data as (line number in text file), (raw text string)
--   fields (lineno, xline)
-- solution first, explaination second
select level, lineno, op, arg, nextline, sum(decode(op,'acc',arg,0)) over (order by level) reg1 from (
  select lineno, op, arg, decode(op,'jmp',lineno+arg,lineno+1) nextline from (
    select lineno, substr(xline,1,3) op, to_number(substr(xline,5)) arg from day08_data
  )
)
connect by nocycle prior nextline=lineno start with lineno = 1
order by level
;
-- last line
-- 204	295	acc	-2	296	2025

/*

1: select level, lineno, op, arg, nextline, sum(decode(op,'acc',arg,0)) over (order by level) reg1 from (
2:   select lineno, op, arg, decode(op,'jmp',lineno+arg,lineno+1) nextline from (
3:     select lineno, substr(xline,1,3) op, to_number(substr(xline,5)) arg from day08_data
4:   )
5: )
6: connect by nocycle prior nextline=lineno start with lineno = 1
7: order by level
8: ;

3:     select lineno, substr(xline,1,3) op, to_number(substr(xline,5)) arg from day08_data
  line 3 parses the raw text into an op(eration) code and an arg(ument) value.
  I'm also keeping lineno because that's my goto

2:   select lineno, op, arg, decode(op,'jmp',lineno+arg,lineno+1) nextline from (
  these language does not have dynamic arguments; for each line I precompute the next line

  DECODE is Oracle's original case statement (but there is also the new and improved CASE statement);
  you give it a value and it walks down a pair list; you can also give an optional default value as the last argument
  decode(direction,'RIGHT',1,'LEFT',-1,0) -> if direction is RIGHT return 1, if LEFT return -1, otherwise return 0
2.1: decode(op,'jmp',lineno+arg,lineno+1)
  decode(op -> one of the acc,nop,jmp values
    ,'jmp',lineno+arg   -> do the jump, return the current lineno + arg
    ,lineno+1 -> otherwise move to the next line

6: connect by nocycle prior nextline=lineno start with lineno = 1
  connect by is a way to join hierarchical data; that is, based on a value from _this_ row, next visit _that_ row
  the PRIOR operator let's you access a value from the previous row; prior is a unitary operator
  typical example is find a manager's employees, table contains rows (employee_name, emp_id, manager_id)
  connect by emp_id = prior manager_id
  let's look at the line again, rearranging the clauses:
6: connect by nocycle prior nextline=lineno start with lineno = 1
  "connect by (prior nextline)=(lineno)" -> whatever nextline was in the previous row, go to the row with the same lineno
  "nocycle" -> if we visit the same row again, stop
  "start with lineno = 1" -> only use rows with (lineno = 1) as the root node; otherwise the query runs "connect by" with each row as root

1: select level, lineno, op, arg, nextline, sum(decode(op,'acc',arg,0)) over (order by level) reg1 from (
  hierarchical queries generate a column LEVEL. LEVEL 1 is the first row, LEVEL 2 rows are those found from "connect by" on LEVEL 1 rows,
    LEVEL 3 are rows found based on LEVEL 2, etc.
  "sum(..) over (..)" is a way to provide a running total and is calculated once all of the rows are generated.
  "sum(..) over (order by level)" -> add the rows up in order of the level of that row
  "sum(decode(op,'acc',arg,0)) ..." -> add the argument if this is an 'acc' command, otherwise do nothing (add 0)
  I alias this to REG1 because I'm thinking about it as a register for a cpu

7: order by level
  we ran the program using "connect by" level 1, then 2, then 3...
  ordering by level let's us see what the program was doing step by step
  the REG1 column of the last row is the solution!
*/
