-- let's work on the example set at first
select * from day08_example;
select lineno, substr(xline,1,3) op, to_number(substr(xline,5)) arg from day08_example

-- how do we find all of the alternative programs? One nop -> jmp or jmp -> nop
-- first, what are they? Do by hand.
/*
original
1	nop	0
2	acc	1
3	jmp	4
4	acc	3
5	jmp	-3
6	acc	-99
7	acc	1
8	jmp	-4
9	acc	6

-- there are 1 nop and 3 jmp, so 4 total alternative programs
1	nop	0	jmp
2	acc	1
3	jmp	4
4	acc	3
5	jmp	-3
6	acc	-99
7	acc	1
8	jmp	-4
9	acc	6

1	nop	0
2	acc	1
3	jmp	4	nop
4	acc	3
5	jmp	-3
6	acc	-99
7	acc	1
8	jmp	-4
9	acc	6

1	nop	0
2	acc	1
3	jmp	4
4	acc	3
5	jmp	-3	nop
6	acc	-99
7	acc	1
8	jmp	-4
9	acc	6

1	nop	0
2	acc	1
3	jmp	4
4	acc	3
5	jmp	-3
6	acc	-99
7	acc	1
8	jmp	-4	nop
9	acc	6

*/

-- hmm, I walked down the list to generate each one
-- how to do that with a sql statement?

-- for now, let's just deal with jmp flipping to nop (don't mess with the jmp<->nop logic right now)
select lineno, substr(xline,1,3) op, to_number(substr(xline,5)) arg from day08_example;

select lineno, substr(xline,1,3) op, to_number(substr(xline,5)) arg from day08_example
connect by level < 3
;

-- easier to work with for now
select level, a.* from (
  select lineno, substr(xline,1,3) op, to_number(substr(xline,5)) arg from day08_example
) a
connect by level < 3
order by lineno, level
;


-- let's try a different way
-- arg, make a view
create or replace view day08_part2_ops as
  select lineno, substr(xline,1,3) op, to_number(substr(xline,5)) arg from day08_example;
select * from day08_part2_ops;

-- 3 lists...
select a.lineno linenoa, a.op opa, a.arg arga, b.lineno linenob, b.op obp, b.arg argb
from day08_part2_ops a
  , day08_part2_ops b
where b.op = 'jmp'
order by a.lineno, b.lineno
/

-- 3 lists...
select linenob prognum, linenoa lineno, opa, opb, decode(opa||linenoa,opb||linenob,'nop',opa) opnew, arga from (
select a.lineno linenoa, a.op opa, a.arg arga, b.lineno linenob, b.op opb, b.arg argb
from day08_part2_ops a
  , day08_part2_ops b
where b.op = 'jmp'
order by a.lineno, b.lineno
)
order by linenob, linenoa
/
/*
3	1	nop	jmp	nop	0
3	2	acc	jmp	acc	1
3	3	jmp	jmp	nop	4
3	4	acc	jmp	acc	3
3	5	jmp	jmp	jmp	-3
3	6	acc	jmp	acc	-99
3	7	acc	jmp	acc	1
3	8	jmp	jmp	jmp	-4
3	9	acc	jmp	acc	6

5	1	nop	jmp	nop	0
5	2	acc	jmp	acc	1
5	3	jmp	jmp	jmp	4
5	4	acc	jmp	acc	3
5	5	jmp	jmp	nop	-3
5	6	acc	jmp	acc	-99
5	7	acc	jmp	acc	1
5	8	jmp	jmp	jmp	-4
5	9	acc	jmp	acc	6

8	1	nop	jmp	nop	0
8	2	acc	jmp	acc	1
8	3	jmp	jmp	jmp	4
8	4	acc	jmp	acc	3
8	5	jmp	jmp	jmp	-3
8	6	acc	jmp	acc	-99
8	7	acc	jmp	acc	1
8	8	jmp	jmp	nop	-4
8	9	acc	jmp	acc	6
*/
-- looks good!

-- now do jmp and nop
select linenob prognum, linenoa lineno, opa, opb
  , decode( opa||linenoa,opb||linenob -- if the line and op are the same...
      ,decode(opa,'nop','jmp','jmp','nop') -- switch them
      ,opa) opnew  -- otherwise keep it the same, I'm sorry this is so painful...
  , arga from (
  select a.lineno linenoa, a.op opa, a.arg arga, b.lineno linenob, b.op opb, b.arg argb
  from day08_part2_ops a, day08_part2_ops b
  where b.op in ('jmp','nop')
)
order by linenob, linenoa
/

-- check the correct lines flipped
select linenob prognum, linenoa lineno, opa, opb
  , decode( opa||linenoa,opb||linenob -- if the line and op are the same...
      ,decode(opa,'nop','jmp','jmp','nop') -- switch them
      ,opa) opnew  -- otherwise keep it the same
  , arga from (
  select a.lineno linenoa, a.op opa, a.arg arga, b.lineno linenob, b.op opb, b.arg argb
  from day08_part2_ops a, day08_part2_ops b
  where b.op in ('jmp','nop')
)
where opa != decode( opa||linenoa,opb||linenob -- if the line and op are the same...
      ,decode(opa,'nop','jmp','jmp','nop') -- switch them
      ,opa)
order by linenob, linenoa
/
/*
1	1	nop	nop	jmp	0
3	3	jmp	jmp	nop	4
5	5	jmp	jmp	nop	-3
8	8	jmp	jmp	nop	-4
*/

-- so now we have the 4 programs, one of which should complete successfully
-- let's save the previous query behind another view
create or replace view day08_part2_programs as
select
    linenob prognum
  , linenoa lineno 
  , decode( opa||linenoa,opb||linenob -- if the line and op are the same...
      ,decode(opa,'nop','jmp','jmp','nop') -- switch them
      ,opa)   -- otherwise keep it the same
    op
  , arga arg 
from (
  select a.lineno linenoa, a.op opa, a.arg arga, b.lineno linenob, b.op opb, b.arg argb
  from day08_part2_ops a, day08_part2_ops b
  where b.op in ('jmp','nop')
)
/
select * from day08_part2_programs;

-- so, can we just feed this into the previous solution?
-- minimum changes!
select level, prognum, lineno, op, arg, nextline, sum(decode(op,'acc',arg,0)) over (order by level) reg1 from (
  select prognum, lineno, op, arg, decode(op,'jmp',lineno+arg,lineno+1) nextline from (
    select prognum, lineno, op, arg from day08_part2_programs
  )
)
connect by nocycle prior nextline=lineno and prior prognum = prognum start with lineno = 1
order by prognum, level
;
/*
level, prognum, lineno, op, arg, nextline, reg1
1	1	1	jmp	0	1	0 -- dead end

1	3	1	nop	0	2	0
2	3	2	acc	1	3	3
3	3	3	nop	4	4	3
4	3	4	acc	3	5	8

1	5	1	nop	0	2	0
2	5	2	acc	1	3	3
3	5	3	jmp	4	7	3
4	5	7	acc	1	8	8
5	5	8	jmp	-4	4	8
6	5	4	acc	3	5	17
7	5	5	nop	-3	6	17

1	8	1	nop	0	2	0
2	8	2	acc	1	3	3
3	8	3	jmp	4	7	3
4	8	7	acc	1	8	8
5	8	8	nop	-4	9	8
6	8	9	acc	6	10	17
*/

-- whoops, need to partition the sum by the program number
select level, prognum, lineno, op, arg, nextline, sum(decode(op,'acc',arg,0)) over (partition by prognum order by level) reg1 from (
  select prognum, lineno, op, arg, decode(op,'jmp',lineno+arg,lineno+1) nextline from (
    select prognum, lineno, op, arg from day08_part2_programs
  )
)
connect by nocycle prior nextline=lineno and prior prognum = prognum start with lineno = 1
order by prognum, level
;
-- that did it!

-- We'll find the only answer by looking for the line with nextline 10
select reg1 from (
select level, prognum, lineno, op, arg, nextline, sum(decode(op,'acc',arg,0)) over (partition by prognum order by level) reg1 from (
  select prognum, lineno, op, arg, decode(op,'jmp',lineno+arg,lineno+1) nextline from (
    select prognum, lineno, op, arg from day08_part2_programs
  )
)
connect by nocycle prior nextline=lineno and prior prognum = prognum start with lineno = 1
)
where nextline = 10;
-- 8

--to recap
create or replace view day08_part2_ops as
  select lineno, substr(xline,1,3) op, to_number(substr(xline,5)) arg from day08_example;
select * from day08_part2_ops;

create or replace view day08_part2_programs as
select
    linenob prognum
  , linenoa lineno 
  , decode( opa||linenoa,opb||linenob -- if the line and op are the same...
      ,decode(opa,'nop','jmp','jmp','nop') -- switch them
      ,opa)   -- otherwise keep it the same
    op
  , arga arg 
from (
  select a.lineno linenoa, a.op opa, a.arg arga, b.lineno linenob, b.op opb, b.arg argb
  from day08_part2_ops a, day08_part2_ops b
  where b.op in ('jmp','nop')
)
/

select reg1 from (
select level, prognum, lineno, op, arg, nextline, sum(decode(op,'acc',arg,0)) over (partition by prognum order by level) reg1 from (
  select prognum, lineno, op, arg, decode(op,'jmp',lineno+arg,lineno+1) nextline from (
    select prognum, lineno, op, arg from day08_part2_programs
  )
)
connect by nocycle prior nextline=lineno and prior prognum = prognum start with lineno = 1
)
where nextline = 10;




--now change the data source to day08_data;
create or replace view day08_part2_ops as
  select lineno, substr(xline,1,3) op, to_number(substr(xline,5)) arg from day08_data;
select * from day08_part2_ops;

create or replace view day08_part2_programs as
select
    linenob prognum
  , linenoa lineno 
  , decode( opa||linenoa,opb||linenob -- if the line and op are the same...
      ,decode(opa,'nop','jmp','jmp','nop') -- switch them
      ,opa)   -- otherwise keep it the same
    op
  , arga arg 
from (
  select a.lineno linenoa, a.op opa, a.arg arga, b.lineno linenob, b.op opb, b.arg argb
  from day08_part2_ops a, day08_part2_ops b
  where b.op in ('jmp','nop')
)
/

-- get rid of the hard coded nextline
select reg1 from (
select level, prognum, lineno, op, arg, nextline, sum(decode(op,'acc',arg,0)) over (partition by prognum order by level) reg1 from (
  select prognum, lineno, op, arg, decode(op,'jmp',lineno+arg,lineno+1) nextline from (
    select prognum, lineno, op, arg from day08_part2_programs
  )
)
connect by nocycle prior nextline=lineno and prior prognum = prognum start with lineno = 1
)
where nextline = where nextline = (select count(*)+1 from day08_data);

