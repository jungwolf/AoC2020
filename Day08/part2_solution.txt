-- assume input is in table day08_data as (line number in text file), (raw text string)
--   fields (lineno, xline)
-- solution first, detailed explaination second
-- I decided to use views to make things a little easier to understand (and to save my sanity)

-- parsed view of the original raw file
create or replace view day08_part2_ops as
select 
  lineno                           -- GOTO from BASIC!!
  , substr(xline,1,3) op           -- operation
  , to_number(substr(xline,5)) arg -- argument to the operation
from day08_data;

-- generate the potential off-by-one op programs
create or replace view day08_part2_programs as
select
    linenob prognum
  , linenoa lineno 
  , decode( opa||linenoa, opb||linenob        -- if the line and op are the same...
      ,decode(opa, 'nop','jmp', 'jmp','nop' ) -- switch them
      ,opa                                   -- otherwise keep it the same
    ) op
  , arga arg 
from (
  select a.lineno linenoa, a.op opa, a.arg arga, b.lineno linenob, b.op opb, b.arg argb
  from day08_part2_ops a, day08_part2_ops b
  where b.op in ('jmp','nop')
)
/

-- close to the same solution as part 1. Basically just added (prior prognum = prognum)
select reg1
from (
  select level
    , prognum
    , lineno
    , op
    , arg
    , nextline
    , sum(decode(op,'acc',arg,0)) over (partition by prognum order by level) reg1
  from (
    select prognum, lineno, op, arg
      , decode(op,'jmp',lineno+arg,lineno+1) nextline
    from (
      select prognum, lineno, op, arg from day08_part2_programs
    )
  )
  connect by nocycle prior nextline=lineno and prior prognum = prognum start with lineno = 1
)
where nextline = (select count(*)+1 from day08_data);


/* "We created PL/SQL for a reason. Stop, Steven. Just stop." -- Larry E.

-- parsed view of the original raw file
01: create or replace view day08_part2_ops as
02: select 
03:   lineno                           -- GOTO from BASIC!!
04:   , substr(xline,1,3) op           -- operation
05:   , to_number(substr(xline,5)) arg -- argument to the operation
06: from day08_data;
Uses substr() to parse the lines. Standard by now.

-- generate the potential off-by-one op programs
Okay, this one is a little odd.
The idea is to find every program line that has a nop or jmp command.
For each one of those, I want to create a copy of the program with just that one operation flipped.
My input had about 250 nop/jmp commands, so I will create 250 new programs.

01: create or replace view day08_part2_programs as
02: select
03:     linenob prognum
04:   , linenoa lineno 
05:  , decode( linenoa, linenob                  -- if the line is the same
06:      ,decode(opa, 'nop','jmp', 'jmp','nop' ) -- switch the the op!
07:      ,opa                                    -- otherwise keep it the same
08:    ) op
09:   , arga arg 
10: from (
11:   select a.lineno linenoa, a.op opa, a.arg arga, b.lineno linenob, b.op opb, b.arg argb
12:   from day08_part2_ops a, day08_part2_ops b
13:   where b.op in ('jmp','nop')
14: )
15: /

* concept explaination *
I'm using a Cartesian join. Let's look at two example tables, A and B. A has 100 rows, 1-100. B has 200 rows, 1-200.
For every row in A, we get a full copy of B. A(100 rows)*B(200 rows) = 20,000 rows total.
  (A.1,B.1), (A.1,B.2), (A.1,B.3) .. (A.1,B.200) (A.2,B.1) .. (A.50,B.1), (A.50,B.2) .. (A.100,B.199), (A.100,B.200)
-- Don't do this, your DBA will hate you. I'll put it to good use this time, I promise. Do what I say, not what I do. :)

* concept explaination *
12:   from day08_part2_ops a, day08_part2_ops b
You can join tables to themselves and they act as two sources. You just have to give them unique aliases.

12/13: from ..., "day08_part2_ops b where b.op in ('jmp','nop')"
This gives me the lines that may have a flipped operation. (jmp or nop) There are about 250 of them.

12:   from day08_part2_ops a, ...
This is just the original program.

12:   from day08_part2_ops a, day08_part2_ops b
13:   where b.op in ('jmp','nop')
When I join them together, each line with jmp/nop has its own full copy of the original program.

05:  , decode( linenoa, linenob                  -- if the line is the same
06:      ,decode(opa, 'nop','jmp', 'jmp','nop' ) -- switch the the op!
07:      ,opa                                    -- otherwise keep it the same
08:    ) op
This is how I flip one and only one nop/jmp per new program.
Each nop/jmp line has its own copy of the full program.
When I reach the line in the program that matches the line of the nop/jmp, I flip whatever is there.
-- decode within decode makes sense to me, I'm sure there is a better way to do it

03:     linenob prognum
04:   , linenoa lineno 
Last part. I need to tell the new programs apart. I use the line of the nop/jmp as the prognum.

That's the main work. View day08_part2_programs creates the programs that I can then run using the solution from part 1.

-- close to the same solution as part 1. Basically just added (prior prognum = prognum)
01: select reg1
02: from (
03:   select level
04:     , prognum
05:     , lineno
06:     , op
07:     , arg
08:     , nextline
09:     , sum(decode(op,'acc',arg,0)) over (partition by prognum order by level) reg1
10:   from (
11:     select prognum, lineno, op, arg
12:       , decode(op,'jmp',lineno+arg,lineno+1) nextline
13:     from (
14:       select prognum, lineno, op, arg from day08_part2_programs
15:     )
16:   )
17:   connect by nocycle prior nextline=lineno and prior prognum = prognum start with lineno = 1
18: )
19: where nextline = (select count(*)+1 from day08_data);

17:   connect by nocycle prior nextline=lineno and prior prognum = prognum start with lineno = 1
Part 1 had us running just one program.
By adding "connect by (prior prognum) = prognum" I can run them all at the same time.
The nextline is specific to that set of prognum rows!
This shows how "start with lineno=1" is more flexible than it originally seemed. Each prognum has a "lineno=1" so each prognum kicks off a "connect by" chain.

19: where nextline = (select count(*)+1 from day08_data);
The part 2 problem description says the valid program will end by trying to run the next line after the end of the program.
Here I find that line by counting the program length and adding 1.
I then look for any program lines who's next line will be the end condition.
REG1 is the answer.
*/
