-- create table/insert data
drop table day04_example;
create table day04_example (lineno number, xline varchar2(4000));
insert into day04_example values(1,'ecl:gry pid:860033327 eyr:2020 hcl:#fffffd');
insert into day04_example values(2,'byr:1937 iyr:2017 cid:147 hgt:183cm');
insert into day04_example values(3,'');
insert into day04_example values(4,'iyr:2013 ecl:amb cid:350 eyr:2023 pid:028048884');
insert into day04_example values(5,'hcl:#cfa07d byr:1929');
insert into day04_example values(6,'');
insert into day04_example values(7,'hcl:#ae17e1 iyr:2013');
insert into day04_example values(8,'eyr:2024');
insert into day04_example values(9,'ecl:brn pid:760753108 byr:1931');
insert into day04_example values(10,'hgt:179cm');
insert into day04_example values(11,'');
insert into day04_example values(12,'hcl:#cfa07d eyr:2025 pid:166559648');
insert into day04_example values(13,'iyr:2011 ecl:brn hgt:59in');
commit;
-- hmm, this might be easier by having sqlldr handle the multiple lines...
-- sqlldr is such a pain...


drop table day04_example_passport_lines;
create table day04_example_passport_lines (full_passport varchar2(4000));

create or replace procedure day04_example_create_passport_lines as
  l_full_line varchar2(4000);
begin
  for i in (select xline from day04_example order by lineno) loop
    if i.xline is null then
      insert into day04_example_passports values (l_full_line);
      l_full_line:= null;
    else
      l_full_line:=l_full_line||' '||i.xline;
    end if;
  end loop;
end;
/

exec day04_example_create_passports;
commit;
select * from day04_example_passports;

-- the problem gives more configuration data so make a table for them
create table day04_password_elements (
  element varchar2(3)
  , description varchar2(50)
  , optional varchar2(1)
);
insert into day04_password_elements values ('byr', 'Birth Year','N');
insert into day04_password_elements values ('iyr', 'Issue Year','N');
insert into day04_password_elements values ('eyr', 'Expiration Year','N');
insert into day04_password_elements values ('hgt', 'Height','N');
insert into day04_password_elements values ('hcl', 'Hair Color','N');
insert into day04_password_elements values ('ecl', 'Eye Color','N');
insert into day04_password_elements values ('pid', 'Passport ID','N');
insert into day04_password_elements values ('cid', 'Country ID','Y');
commit;
select * from day04_password_elements;

-- day04_example_passport_lines, day04_password_elements
select * from day04_example_passport_lines;
select * from day04_password_elements;

-- create function to get the value given a key
create or replace function get_keyvalue_value (string varchar2, key varchar2, seperator varchar2, deliminater varchar2) return varchar2 as
begin
  return 'x';
end;
/
select get_keyvalue_value('boo','a','b','c') from dual;
-- initial test

-- note, added lineno to day04_example_passport_lines, see create_passport_lines.txt for details.

-- can we combine these together?
select * from day04_example_passport_lines;
with t (gno, l, all_xline, levels) as (
            select groupno, regexp_substr(xline,'[^:]+',1,1)           , xline    , 1        from s_2_r
  union all select gno    , regexp_substr(all_xline,'[^:]+',1,levels+1), all_xline, levels+1 from t
              where regexp_substr(all_xline,'[^:]+',1,levels+1) is not null
  )
select *
from t
order by gno, l;

-- yes!
select lineno, full_passport from day04_example_passport_lines;
with t (gno, pp_elements, full_passport, levels) as (
            select lineno gno, regexp_substr(full_passport,'[^ ]+',1,1)           , full_passport    , 1        from day04_example_passport_lines
  union all select gno    , regexp_substr(full_passport,'[^ ]+',1,levels+1), full_passport, levels+1 from t
              where regexp_substr(full_passport,'[^ ]+',1,levels+1) is not null
  )
select gno, pp_elements
from t
order by gno;


select ELEMENT, DESCRIPTION, OPTIONAL from day04_password_elements;

-- let's going the two together
with t (gno, pp_elements, full_passport, levels) as (
            select lineno gno, regexp_substr(full_passport,'[^ ]+',1,1)           , full_passport    , 1        from day04_example_passport_lines
  union all select gno    , regexp_substr(full_passport,'[^ ]+',1,levels+1), full_passport, levels+1 from t
              where regexp_substr(full_passport,'[^ ]+',1,levels+1) is not null
  )
select gno, pp_elements, e.optional
from t, day04_password_elements e
where substr(t.pp_elements,1,3) = e.element
order by gno;

-- let's ignore the optional element
with t (gno, pp_elements, full_passport, levels) as (
            select lineno gno, regexp_substr(full_passport,'[^ ]+',1,1)           , full_passport    , 1        from day04_example_passport_lines
  union all select gno    , regexp_substr(full_passport,'[^ ]+',1,levels+1), full_passport, levels+1 from t
              where regexp_substr(full_passport,'[^ ]+',1,levels+1) is not null
  )
select gno, pp_elements, e.optional
from t, day04_password_elements e
where substr(t.pp_elements,1,3) = e.element
  and e.optional = 'N'
order by gno;

-- time to group and count
select gno, count(*) from (
with t (gno, pp_elements, full_passport, levels) as (
            select lineno gno, regexp_substr(full_passport,'[^ ]+',1,1)           , full_passport    , 1        from day04_example_passport_lines
  union all select gno    , regexp_substr(full_passport,'[^ ]+',1,levels+1), full_passport, levels+1 from t
              where regexp_substr(full_passport,'[^ ]+',1,levels+1) is not null
  )
select gno, pp_elements, e.optional
from t, day04_password_elements e
where substr(t.pp_elements,1,3) = e.element
  and e.optional = 'N'
)
group by gno
order by gno;

-- we excluded the optional element, so now all valid passports will have 7 elements
-- count(*) = 7
select gno, count(*) from (
with t (gno, pp_elements, full_passport, levels) as (
            select lineno gno, regexp_substr(full_passport,'[^ ]+',1,1)           , full_passport    , 1        from day04_example_passport_lines
  union all select gno    , regexp_substr(full_passport,'[^ ]+',1,levels+1), full_passport, levels+1 from t
              where regexp_substr(full_passport,'[^ ]+',1,levels+1) is not null
  )
select gno, pp_elements, e.optional
from t, day04_password_elements e
where substr(t.pp_elements,1,3) = e.element
  and e.optional = 'N'
)
group by gno
having count(*)=7
order by gno;

-- finally, count the number of valid passports
select count(*) valid_passports from (
select gno, count(*) from (
with t (gno, pp_elements, full_passport, levels) as (
            select lineno gno, regexp_substr(full_passport,'[^ ]+',1,1)           , full_passport    , 1        from day04_example_passport_lines
  union all select gno    , regexp_substr(full_passport,'[^ ]+',1,levels+1), full_passport, levels+1 from t
              where regexp_substr(full_passport,'[^ ]+',1,levels+1) is not null
  )
select gno, pp_elements, e.optional
from t, day04_password_elements e
where substr(t.pp_elements,1,3) = e.element
  and e.optional = 'N'
)
group by gno
having count(*)=7
order by gno
);
