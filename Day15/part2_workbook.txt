--Given your starting numbers, what will be the 30000000th number spoken?
create or replace procedure last_spoken_number(max_spoken number) is
  last_lineno number;
  new_spoken number;
begin

--init
-- get the starting numbers
  select lineno, spoken into last_lineno, new_spoken from day15_game order by lineno desc fetch first 1 rows only; 
--dbms_output.put_line(last_lineno||' last_spoken='||new_spoken);

  -- i is the new lineno
  for i in last_lineno+1 .. max_spoken loop
    select /*+ index(g) */ max(lineno) into last_lineno from day15_game g where spoken=new_spoken and lineno < i-1;
--dbms_output.put_line(i||' last_lineno='||last_lineno);

    -- last_spoken is null if doesn't exist yet
    select nvl2(last_lineno, i-1-last_lineno ,0) into new_spoken from dual;
--dbms_output.put_line(i||' new_spoken='||new_spoken);
    insert into day15_game (lineno, spoken) values (i, new_spoken );
    commit;
  end loop;
end;
/

--Given your starting numbers, what will be the 30000000th (30,000,000) number spoken?
truncate table day15_game;
insert into day15_game values (1,1);
insert into day15_game values (2,0);
insert into day15_game values (3,15);
insert into day15_game values (4,2);
insert into day15_game values (5,10);
insert into day15_game values (6,13);
commit;

drop index day15_game_idx;
create index day15_game_idx on day15_game(spoken, lineno);
exec last_spoken_number(30000000);
select * from day15_game order by lineno desc fetch first 1 rows only;



-- well, didn't work.

-- didn't assign new value to new_spoken




-- trying update instead of insert; need to get dbms_output working correctly.
-- worst debugging ever
--Given your starting numbers, what will be the 30000000th number spoken?
create or replace procedure last_spoken_number(max_spoken number) is
  last_lineno number;
  new_spoken number;
begin

-- get the starting numbers
  select lineno, spoken into last_lineno, new_spoken from day15_game order by lineno desc fetch first 1 rows only; 

  -- i is the new lineno
  for i in last_lineno+1 .. max_spoken loop
    select /*+ index(g) */ max(lineno) into last_lineno from day15_game g where spoken=new_spoken and lineno < i-1;

    -- last_spoken is null if doesn't exist yet
    select nvl2(last_lineno, i-1-last_lineno ,0) into new_spoken from dual;

    if new_spoken = 0 then
      insert into day15_game values (i, new_spoken);
    else
      update day15_game set lineno = i-1-last_lineno where spoken = new_spoken;
    end if;
    commit;
dbms_session.sleep(1);
  end loop;
end;
/

--Given your starting numbers, what will be the 30000000th (30,000,000) number spoken?
truncate table day15_game;
insert into day15_game values (1,1);
insert into day15_game values (2,0);
insert into day15_game values (3,15);
insert into day15_game values (4,2);
insert into day15_game values (5,10);
insert into day15_game values (6,13);
commit;

drop index day15_game_idx;
create index day15_game_idx on day15_game(spoken, lineno);
--exec last_spoken_number(30000000);
exec last_spoken_number(2020);
select * from day15_game order by lineno desc fetch first 1 rows only;
select * from day15_game order by lineno;



----- closing in on it
create or replace procedure last_spoken_number(max_spoken number) is
  last_lineno number;
  prev_lineno number;
  new_spoken number;
  last_spoken number;
begin


  -- i is the new lineno
  for i in last_lineno+1 .. max_spoken loop
    -- get the last numbers, shouldn't have to do this but brute forcing for now
    select lineno, spoken into last_lineno, last_spoken from day15_game order by lineno desc fetch first 1 rows only; 

    -- has the previous number been said before?
    select  max(lineno) into prev_lineno from day15_game g where spoken=last_spoken and lineno < last_lineno;

    -- prev_lineno is null if doesn't exist yet
    if prev_lineno in null then
      -- if it doesn't exist yet, say 0, which means update 0 to last_lineno + 1
      update day15_game set lineno = last_lineno+1 where spoken = 0;
    else
      -- it has been spoken before, insert or update the age of the spoken number
      insert into day15_game values (last_lineno+1, new_spoken);
    
    
    select nvl2(last_lineno, i-1-last_lineno ,0) into new_spoken from dual;
    
    if new_spoken = 0 then
      insert into day15_game values (i, new_spoken);
    else
      update day15_game set lineno = i-1-last_lineno where spoken = new_spoken;
    end if;
    commit;
dbms_session.sleep(1);
  end loop;
end;
/

--Given your starting numbers, what will be the 30000000th (30,000,000) number spoken?
truncate table day15_game;
insert into day15_game values (1,1);
insert into day15_game values (2,0);
insert into day15_game values (3,15);
insert into day15_game values (4,2);
insert into day15_game values (5,10);
insert into day15_game values (6,13);
commit;

drop index day15_game_idx;
create index day15_game_idx on day15_game(spoken, lineno);
--exec last_spoken_number(30000000);
exec last_spoken_number(2020);
select * from day15_game order by lineno desc fetch first 1 rows only;
select * from day15_game order by lineno;






-- probably working
-- day15_game (lineno number, spoken number)
create or replace procedure last_spoken_number(max_spoken number) is
  last_lineno number;
  prev_lineno number;
  new_spoken number;
  last_spoken number;
  age number;
begin

  -- get the last numbers, shouldn't have to do this but brute forcing for now
  select lineno, spoken into last_lineno, last_spoken from day15_game order by lineno desc fetch first 1 rows only; 

  while last_lineno <= max_spoken loop

    -- has the previous number been said before? max makes it null if the row doesn't exist, instead of an error
    select  max(lineno) into prev_lineno from day15_game g where spoken=last_spoken;

    -- prev_lineno is null if doesn't exist yet
    if prev_lineno is null then
      new_spoken:= 0;
      select last_lineno-lineno into age from day15_game where spoken=0;
      insert into day15_game values (last_lineno,last_spoken);
    else
      -- it has been spoken before, say the age
      age:=last_lineno-prev_lineno;
      new_spoken:= age;
      update day15_game set lineno = last_lineno where spoken = last_spoken;
    end if;
    
    commit;
    last_lineno := last_lineno+1;
    last_spoken:= new_spoken;

--dbms_session.sleep(1);
  end loop;
end;
/

--Given your starting numbers, what will be the 30000000th (30,000,000) number spoken?
truncate table day15_game;
--insert into day15_game values (1,0);
--insert into day15_game values (2,3);
--insert into day15_game values (3,6);
insert into day15_game values (1,1);
insert into day15_game values (2,0);
insert into day15_game values (3,15);
insert into day15_game values (4,2);
insert into day15_game values (5,10);
insert into day15_game values (6,13);
commit;

drop index day15_game_idx;
create index day15_game_idx on day15_game(spoken, lineno);
-- may need to put a hint in the pl/sql...
exec dbms_stats.gather_table_stats('jungwolf','day15_game');
--exec last_spoken_number(10);
--exec last_spoken_number(2020);
exec last_spoken_number(30000000);
select lineno, spoken, 30000000-lineno, round(lineno/30000000*100,2) prct from day15_game order by lineno desc fetch first 1 rows only;
select * from day15_game order by lineno;


select * from dba_source where name = 'LAST_SPOKEN_NUMBER' order by line;

-- took 9779.51 seconds
