create or replace function find_first_seat_location(currentid number, stepx number, stepy number, row_length number) return number as
--  id_jump number;
  i number;
  currentx number;
  currenty number;
  nextx number;
  nexty number;
  nextseat number;
  nextid number;
begin
  -- what are my current x,y
  select x,y into currentx,currenty from day11_xy where id=currentid;
  -- pretend this is loop
  i:=1;
  -- compute next x,y
  nextx := currentx+stepx*i;
  nexty := currenty+stepy*i;
  
  -- return null ('.') if off the board
  -- y past end of table is okay, returns null anyway
  if nexty < 1 then
    return null;
  end if;
  if nextx < 1 or nextx > row_length then
    return null;
  end if;

  -- we're good, so what is the next id?
--  id_jump:=nexty+(nextx-1)*row_length;
  nextid:=nexty+(nextx-1)*row_length;
--  return nextid;

  select seat into nextseat from day11_xy where id=nextid;
  if nextseat is null then
    null;
  end if;
-- location
--  return nextid;
-- value
  return nextseat;
end;
/

--create or replace function find_first_seat_location(currentid number, stepx number, stepy number, row_length number) return number as
select id, y, x, seat, row_length, y+(x-1)*row_length, find_first_seat_location(id,+1,0,row_length) "where"
  , 1
from day11_xy;
/* x across, y down
0 1 2 3
1 1 4 7
2 2 5 8
3 3 6 9
*/
/* x across, y down, seat value
0 1 2 3
1 0 1 1
2 0 1 1
3 0 n 0
*/
/* x across, y down, seat value
0 1 2 3
1 L # #
2 L # #
3 L . L
*/
select id, y, x, seat, row_length, y+(x-1)*row_length, find_first_seat_location(id,+1,0,row_length) "where"
  , 1
from day11_xy;
